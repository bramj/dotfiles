" keyboard shortcuts
inoremap jj <ESC>

set cursorline          " highlight current line

set colorcolumn=80 " show 80 char column line

" move vertically by visual line
" (for long lines that are broken into 2 lines
nnoremap j gj
nnoremap k gk

" highlight search
set hlsearch
nmap <leader>hl :let @/ = ""<CR>

" Yank the file path of current open file
nmap cp :let @+ = expand("%")<CR>

" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'iTerm.app')
    colorscheme Tomorrow-Night
  else
    colorscheme desert
  endif
endif

set guifont=DejaVu\ Sans\ Mono:h15
syntax on

" ------------------------------------------------------------------------------------------------
" COLORS
" ------------------------------------------------------------------------------------------------

" Make sure colored syntax mode is on, and make it Just Work with 256-color terminals.
set background=dark
let g:rehash256 = 1 " Something to do with Molokai?
" colorscheme Tomorrow-Night
colorscheme Molokai

" Make trailing spaces very visible
highlight SpecialKey ctermbg=Yellow guibg=Yellow

" Markdown could be more fruit salady
highlight link markdownH1 PreProc
highlight link markdownH2 PreProc
highlight link markdownLink Character
highlight link markdownBold String
highlight link markdownItalic Statement
highlight link markdownCode Delimiter
highlight link markdownCodeBlock Delimiter
highlight link markdownListMarker Todo


let g:python_highlight_all = 1

" set guifont=Source\ Code\ Pro\ for\ Powerline:h20
" set guifont=Monospace:h30

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

" Highlighting for Ember .hbs files
autocmd BufNewFile,BufRead *.hbs   set syntax=handlebars

" FIX: PluginUpdate => git pull: git-sh-setup: No such file or directory in MacVim (OK in non-GUI version of Vim)
if has("gui_macvim")
    set shell=/bin/bash\ -l
endif

" Asynchronous Lint Engine https://github.com/w0rp/ale
" let g:ale_linters = {
" \   'ruby': ['rubocop'],
" \   'javascript': ['eslint']
" \}
" let g:ale_linters_explicit = 1
" Enable integration with vim-airline so lint errors are shown in the status bar
" let g:airline#extensions#ale#enabled = 1

let g:notes_directories = ['~/Documents/vimnotes']

" Define a command to make it easier to use
" Allows you to do: `:QFDo %s/foo/bar/gc`
command! -nargs=+ QFDo call QFDo(<q-args>)

" Function that does the work
function! QFDo(command)
    " Create a dictionary so that we can
    " get the list of buffers rather than the
    " list of lines in buffers (easy way
    " to get unique entries)
    let buffer_numbers = {}
    " For each entry, use the buffer number as
    " a dictionary key (won't get repeats)
    for fixlist_entry in getqflist()
        let buffer_numbers[fixlist_entry['bufnr']] = 1
    endfor
    " Make it into a list as it seems cleaner
    let buffer_number_list = keys(buffer_numbers)

    " For each buffer
    for num in buffer_number_list
        " Select the buffer
        exe 'buffer' num
        " Run the command that's passed as an argument
        exe a:command
        " Save if necessary
        update
    endfor
endfunction

" Load correct rvm rubies: https://rvm.io/integration/vim
set shell=/bin/sh
